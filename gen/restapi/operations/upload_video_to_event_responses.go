// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gardensentry.v1/gen/models"
)

// UploadVideoToEventCreatedCode is the HTTP code returned for type UploadVideoToEventCreated
const UploadVideoToEventCreatedCode int = 201

/*UploadVideoToEventCreated OK

swagger:response uploadVideoToEventCreated
*/
type UploadVideoToEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewUploadVideoToEventCreated creates UploadVideoToEventCreated with default headers values
func NewUploadVideoToEventCreated() *UploadVideoToEventCreated {

	return &UploadVideoToEventCreated{}
}

// WithPayload adds the payload to the upload video to event created response
func (o *UploadVideoToEventCreated) WithPayload(payload *models.Event) *UploadVideoToEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload video to event created response
func (o *UploadVideoToEventCreated) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadVideoToEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UploadVideoToEventDefault error

swagger:response uploadVideoToEventDefault
*/
type UploadVideoToEventDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadVideoToEventDefault creates UploadVideoToEventDefault with default headers values
func NewUploadVideoToEventDefault(code int) *UploadVideoToEventDefault {
	if code <= 0 {
		code = 500
	}

	return &UploadVideoToEventDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the upload video to event default response
func (o *UploadVideoToEventDefault) WithStatusCode(code int) *UploadVideoToEventDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the upload video to event default response
func (o *UploadVideoToEventDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the upload video to event default response
func (o *UploadVideoToEventDefault) WithPayload(payload *models.Error) *UploadVideoToEventDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload video to event default response
func (o *UploadVideoToEventDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadVideoToEventDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
