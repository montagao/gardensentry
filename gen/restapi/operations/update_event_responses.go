// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gardensentry.v1/gen/models"
)

// UpdateEventOKCode is the HTTP code returned for type UpdateEventOK
const UpdateEventOKCode int = 200

/*UpdateEventOK OK

swagger:response updateEventOK
*/
type UpdateEventOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewUpdateEventOK creates UpdateEventOK with default headers values
func NewUpdateEventOK() *UpdateEventOK {

	return &UpdateEventOK{}
}

// WithPayload adds the payload to the update event o k response
func (o *UpdateEventOK) WithPayload(payload *models.Event) *UpdateEventOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update event o k response
func (o *UpdateEventOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEventOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateEventDefault error

swagger:response updateEventDefault
*/
type UpdateEventDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateEventDefault creates UpdateEventDefault with default headers values
func NewUpdateEventDefault(code int) *UpdateEventDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateEventDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update event default response
func (o *UpdateEventDefault) WithStatusCode(code int) *UpdateEventDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update event default response
func (o *UpdateEventDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update event default response
func (o *UpdateEventDefault) WithPayload(payload *models.Error) *UpdateEventDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update event default response
func (o *UpdateEventDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEventDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
